{"version":3,"sources":["server.js"],"names":["express","require","connectDB","dotenv","userRoutes","chatRoutes","messageRoutes","notFound","errorHandler","path","config","app","use","json","__dirname1","resolve","process","env","NODE_ENV","join","get","req","res","sendFile","send","PORT","server","listen","console","log","yellow","bold","io","pingTimeout","cors","origin","on","socket","userData","_id","emit","room","newMessageRecieved","chat","users","forEach","user","sender","off","leave"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAMI,UAAU,GAAGJ,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAMK,aAAa,GAAGL,OAAO,CAAC,wBAAD,CAA7B;;eACmCA,OAAO,CAAC,8BAAD,C;IAAlCM,Q,YAAAA,Q;IAAUC,Y,YAAAA,Y;;AAClB,IAAMC,IAAI,GAAGR,OAAO,CAAC,MAAD,CAApB;;AAEAE,MAAM,CAACO,MAAP;AACAR,SAAS;AACT,IAAMS,GAAG,GAAGX,OAAO,EAAnB;AAEAW,GAAG,CAACC,GAAJ,CAAQZ,OAAO,CAACa,IAAR,EAAR,E,CAAyB;AAEzB;AACA;AACA;;AAEAF,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBR,UAArB;AACAO,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBP,UAArB;AACAM,GAAG,CAACC,GAAJ,CAAQ,cAAR,EAAwBN,aAAxB,E,CAEA;;AAEA,IAAMQ,UAAU,GAAGL,IAAI,CAACM,OAAL,EAAnB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCP,EAAAA,GAAG,CAACC,GAAJ,CAAQZ,OAAO,UAAP,CAAeS,IAAI,CAACU,IAAL,CAAUL,UAAV,EAAsB,iBAAtB,CAAf,CAAR;AAEAH,EAAAA,GAAG,CAACS,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,WACXA,GAAG,CAACC,QAAJ,CAAad,IAAI,CAACM,OAAL,CAAaD,UAAb,EAAyB,UAAzB,EAAqC,OAArC,EAA8C,YAA9C,CAAb,CADW;AAAA,GAAb;AAGD,CAND,MAMO;AACLH,EAAAA,GAAG,CAACS,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,IAAAA,GAAG,CAACE,IAAJ,CAAS,kBAAT;AACD,GAFD;AAGD,C,CAED;AAEA;;;AACAb,GAAG,CAACC,GAAJ,CAAQL,QAAR;AACAI,GAAG,CAACC,GAAJ,CAAQJ,YAAR;AAEA,IAAMiB,IAAI,GAAGT,OAAO,CAACC,GAAR,CAAYQ,IAAzB;AAEA,IAAMC,MAAM,GAAGf,GAAG,CAACgB,MAAJ,CACbF,IADa,EAEbG,OAAO,CAACC,GAAR,CAAY,iCAA0BJ,IAA1B,SAAoCK,MAApC,CAA2CC,IAAvD,CAFa,CAAf;;AAKA,IAAMC,EAAE,GAAG/B,OAAO,CAAC,WAAD,CAAP,CAAqByB,MAArB,EAA6B;AACtCO,EAAAA,WAAW,EAAE,KADyB;AAEtCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,uBADJ,CAEJ;;AAFI;AAFgC,CAA7B,CAAX;;AAQAH,EAAE,CAACI,EAAH,CAAM,YAAN,EAAoB,UAACC,MAAD,EAAY;AAC9BT,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAQ,EAAAA,MAAM,CAACD,EAAP,CAAU,OAAV,EAAmB,UAACE,QAAD,EAAc;AAC/BD,IAAAA,MAAM,CAAClB,IAAP,CAAYmB,QAAQ,CAACC,GAArB;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,WAAZ;AACD,GAHD;AAKAH,EAAAA,MAAM,CAACD,EAAP,CAAU,WAAV,EAAuB,UAACK,IAAD,EAAU;AAC/BJ,IAAAA,MAAM,CAAClB,IAAP,CAAYsB,IAAZ;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBY,IAAnC;AACD,GAHD;AAIAJ,EAAAA,MAAM,CAACD,EAAP,CAAU,QAAV,EAAoB,UAACK,IAAD;AAAA,WAAUJ,MAAM,MAAN,CAAUI,IAAV,EAAgBD,IAAhB,CAAqB,QAArB,CAAV;AAAA,GAApB;AACAH,EAAAA,MAAM,CAACD,EAAP,CAAU,aAAV,EAAyB,UAACK,IAAD;AAAA,WAAUJ,MAAM,MAAN,CAAUI,IAAV,EAAgBD,IAAhB,CAAqB,aAArB,CAAV;AAAA,GAAzB;AAEAH,EAAAA,MAAM,CAACD,EAAP,CAAU,aAAV,EAAyB,UAACM,kBAAD,EAAwB;AAC/C,QAAIC,IAAI,GAAGD,kBAAkB,CAACC,IAA9B;AAEA,QAAI,CAACA,IAAI,CAACC,KAAV,EAAiB,OAAOhB,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAP;AAEjBc,IAAAA,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,UAAIA,IAAI,CAACP,GAAL,IAAYG,kBAAkB,CAACK,MAAnB,CAA0BR,GAA1C,EAA+C;AAE/CF,MAAAA,MAAM,MAAN,CAAUS,IAAI,CAACP,GAAf,EAAoBC,IAApB,CAAyB,kBAAzB,EAA6CE,kBAA7C;AACD,KAJD;AAKD,GAVD;AAYAL,EAAAA,MAAM,CAACW,GAAP,CAAW,OAAX,EAAoB,YAAM;AACxBpB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAQ,IAAAA,MAAM,CAACY,KAAP,CAAaX,QAAQ,CAACC,GAAtB;AACD,GAHD;AAID,CA9BD","sourcesContent":["const express = require(\"express\");\nconst connectDB = require(\"./config/db\");\nconst dotenv = require(\"dotenv\");\nconst userRoutes = require(\"./routes/userRoutes\");\nconst chatRoutes = require(\"./routes/chatRoutes\");\nconst messageRoutes = require(\"./routes/messageRoutes\");\nconst { notFound, errorHandler } = require(\"./middleware/errorMiddleware\");\nconst path = require(\"path\");\n\ndotenv.config();\nconnectDB();\nconst app = express();\n\napp.use(express.json()); // to accept json data\n\n// app.get(\"/\", (req, res) => {\n//   res.send(\"API Running!\");\n// });\n\napp.use(\"/api/user\", userRoutes);\napp.use(\"/api/chat\", chatRoutes);\napp.use(\"/api/message\", messageRoutes);\n\n// --------------------------deployment------------------------------\n\nconst __dirname1 = path.resolve();\n\nif (process.env.NODE_ENV === \"production\") {\n  app.use(express.static(path.join(__dirname1, \"/frontend/build\")));\n\n  app.get(\"*\", (req, res) =>\n    res.sendFile(path.resolve(__dirname1, \"frontend\", \"build\", \"index.html\"))\n  );\n} else {\n  app.get(\"/\", (req, res) => {\n    res.send(\"API is running..\");\n  });\n}\n\n// --------------------------deployment------------------------------\n\n// Error Handling middlewares\napp.use(notFound);\napp.use(errorHandler);\n\nconst PORT = process.env.PORT;\n\nconst server = app.listen(\n  PORT,\n  console.log(`Server running on PORT ${PORT}...`.yellow.bold)\n);\n\nconst io = require(\"socket.io\")(server, {\n  pingTimeout: 60000,\n  cors: {\n    origin: \"http://localhost:3000\",\n    // credentials: true,\n  },\n});\n\nio.on(\"connection\", (socket) => {\n  console.log(\"Connected to socket.io\");\n  socket.on(\"setup\", (userData) => {\n    socket.join(userData._id);\n    socket.emit(\"connected\");\n  });\n\n  socket.on(\"join chat\", (room) => {\n    socket.join(room);\n    console.log(\"User Joined Room: \" + room);\n  });\n  socket.on(\"typing\", (room) => socket.in(room).emit(\"typing\"));\n  socket.on(\"stop typing\", (room) => socket.in(room).emit(\"stop typing\"));\n\n  socket.on(\"new message\", (newMessageRecieved) => {\n    var chat = newMessageRecieved.chat;\n\n    if (!chat.users) return console.log(\"chat.users not defined\");\n\n    chat.users.forEach((user) => {\n      if (user._id == newMessageRecieved.sender._id) return;\n\n      socket.in(user._id).emit(\"message recieved\", newMessageRecieved);\n    });\n  });\n\n  socket.off(\"setup\", () => {\n    console.log(\"USER DISCONNECTED\");\n    socket.leave(userData._id);\n  });\n});\n"],"file":"server.dev.js"}