{"version":3,"sources":["server.js"],"names":["express","require","connectDB","userRoutes","messageRoutes","dotenv","path","config","app","use","json","chatRoutes","__dirname1","resolve","process","env","NODE_ENV","req","res","sendFile","notFound","errorHandler","PORT","listen","console","log","yellow","bold","io","server","pingTimeout","cors","origin","on","socket","userData","join","_id","emit","room","newMessageRecieved","chat","users","forEach","user","sender","leave"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,UAAYD,QAAQ,eADpBD,OAAUC,QAAQ,UAGlBE,WAAaF,QAAQ,uBAFrBC,WAAYD,QAAQ,uBAIpBG,cAAgBH,QAAQ,mCAH9BA,QAAA,gCAAMI,kBAAAA,SAASJ,sBAAAA,aAKTK,KAAOL,QAAQ,QAErBI,OAAOE,SALPL,YAOA,IAAMM,IAAMR,UAEZQ,IAAIC,IAAIT,QAAQU,QAMhBF,IAAIC,IAAI,YAAaN,YAVrBE,IAAAA,IAAOE,YAAPI,YACAT,IAAAA,IAAAA,eAASE,eAMT,IAAAQ,WAAAN,KAAAO,UAW6B,eAAzBC,QAAQC,IAAIC,UARhBR,IAAIC,IAAIT,QAAA,OAAaG,KAAAA,KAArBS,WAAA,qBAEAJ,IAAIC,IAAI,IAAA,SAAAQ,EAAAC,GAAA,OAUJA,EAAIC,SAASb,KAAKO,QAAQD,WAAY,WAAY,QAAS,kBAJ/DJ,IAAIM,IAAAA,IAAA,SAAYE,EAAAA,GACdR,EAAIC,KAAIT,sBAQPQ,IAFDC,IAAAW,UAGDZ,IAEDC,IAAAY,cAMA,IAAMC,KAAOR,QAAQC,IAAIO,KAHrBb,OAAIW,IAARG,OACAf,KAEAgB,QAAUC,IAAGX,0BAAAA,OAAbQ,KAAaR,OAAbY,OAAAC,OAOQC,GAAG3B,QAAQ,YAARA,CAAqB4B,OAAQ,CACtCC,YAAa,IACbC,KAAM,CACJC,OAAQ,2BAKZJ,GAAGK,GAAG,aAAc,SAAAC,GAClBV,QAAQC,IAAI,0BACZS,EAAOD,GAAG,QAAS,SAAAE,GACjBD,EAAOE,KAAKD,EAASE,KACrBH,EAAOI,KAAK,eAIZJ,EAAAA,GAAOE,YAAP,SAAAG,GACAf,EAAOY,KAAKG,GAFdf,QAAAC,IAAA,qBAAAc,KAIoBL,EAAAD,GAAUC,SAAM,SAANK,GAAM,OAAUD,EAAK,GAAAC,GAA/BD,KAAA,YAAAJ,EAApBD,GAAA,cAAA,SAAAM,GAAA,OAAAL,EAAA,GAAAK,GAAAD,KAAA,iBACyBJ,EAAAD,GAAUC,cAAUK,SAAVC,GAAnC,IAAAC,EAAAD,EAAAC,KAGE,IAAIA,EAAIC,MAAGF,OAAAA,QAAmBC,IAA9B,0BAIAA,EAAKC,MAAMC,QAAQ,SAAAC,GACbA,EAAKP,KAAOG,EAAmBK,OAAOR,KAD5CH,EAAA,GAAAU,EAAAP,KAAAC,KAAA,mBAAAE,OASAN,EAAAA,IAAOY,QAAMX,WAFfX,QAAAC,IAAA,qBA1BFS,EAAAY,MAAAX,SAAAE","file":"server.min.js","sourcesContent":["const express = require(\"express\");\nconst connectDB = require(\"./config/db\");\nconst dotenv = require(\"dotenv\");\nconst userRoutes = require(\"./routes/userRoutes\");\nconst chatRoutes = require(\"./routes/chatRoutes\");\nconst messageRoutes = require(\"./routes/messageRoutes\");\nconst { notFound, errorHandler } = require(\"./middleware/errorMiddleware\");\nconst path = require(\"path\");\n\ndotenv.config();\nconnectDB();\nconst app = express();\n\napp.use(express.json()); // to accept json data\n\n// app.get(\"/\", (req, res) => {\n//   res.send(\"API Running!\");\n// });\n\napp.use(\"/api/user\", userRoutes);\napp.use(\"/api/chat\", chatRoutes);\napp.use(\"/api/message\", messageRoutes);\n\n// --------------------------deployment------------------------------\n\nconst __dirname1 = path.resolve();\n\nif (process.env.NODE_ENV === \"production\") {\n  app.use(express.static(path.join(__dirname1, \"/frontend/build\")));\n\n  app.get(\"*\", (req, res) =>\n    res.sendFile(path.resolve(__dirname1, \"frontend\", \"build\", \"index.html\"))\n  );\n} else {\n  app.get(\"/\", (req, res) => {\n    res.send(\"API is running..\");\n  });\n}\n\n// --------------------------deployment------------------------------\n\n// Error Handling middlewares\napp.use(notFound);\napp.use(errorHandler);\n\nconst PORT = process.env.PORT;\n\nconst server = app.listen(\n  PORT,\n  console.log(`Server running on PORT ${PORT}...`.yellow.bold)\n);\n\nconst io = require(\"socket.io\")(server, {\n  pingTimeout: 60000,\n  cors: {\n    origin: \"http://localhost:3000\",\n    // credentials: true,\n  },\n});\n\nio.on(\"connection\", (socket) => {\n  console.log(\"Connected to socket.io\");\n  socket.on(\"setup\", (userData) => {\n    socket.join(userData._id);\n    socket.emit(\"connected\");\n  });\n\n  socket.on(\"join chat\", (room) => {\n    socket.join(room);\n    console.log(\"User Joined Room: \" + room);\n  });\n  socket.on(\"typing\", (room) => socket.in(room).emit(\"typing\"));\n  socket.on(\"stop typing\", (room) => socket.in(room).emit(\"stop typing\"));\n\n  socket.on(\"new message\", (newMessageRecieved) => {\n    var chat = newMessageRecieved.chat;\n\n    if (!chat.users) return console.log(\"chat.users not defined\");\n\n    chat.users.forEach((user) => {\n      if (user._id == newMessageRecieved.sender._id) return;\n\n      socket.in(user._id).emit(\"message recieved\", newMessageRecieved);\n    });\n  });\n\n  socket.off(\"setup\", () => {\n    console.log(\"USER DISCONNECTED\");\n    socket.leave(userData._id);\n  });\n});\n"]}